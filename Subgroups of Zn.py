from collections import defaultdict


def cyclic_group(n):
    """Returns the elements of Z_n"""
    return list(range(n))


def subgroup(generator, n):
    """Returns the cyclic subgroup generated by an element in Z_n"""
    elements = []
    current = 0
    while current not in elements:
        elements.append(current)
        current = (current + generator) % n
    return sorted(elements)


def find_all_subgroups(n):
    seen = set()
    subgroup_dict = dict()
    gen_dict = defaultdict(list)

    for a in range(n):
        g = subgroup(a, n)
        g_tuple = tuple(g)
        if g_tuple not in seen:
            seen.add(g_tuple)
            subgroup_dict[g_tuple] = {
                'order': len(g),
                'elements': g,
                'generators': [a]
            }
        else:
            subgroup_dict[g_tuple]['generators'].append(a)

    return subgroup_dict


def print_subgroups(subgroup_dict):
    for i, (key, info) in enumerate(sorted(subgroup_dict.items(), key=lambda x: x[1]['order'])):
        print(f"Subgroup {i + 1}:")
        print(f"  Order: {info['order']}")
        print(f"  Elements: {info['elements']}")
        print(f"  Generators: {sorted(info['generators'])}")
        print()


# Run for Z_18
n = 6
print(f"Subgroups of Z_{n}:\n")
subgroups = find_all_subgroups(n)
print_subgroups(subgroups)
